image: debian:unstable

stages:
  - build
  - document
  - publish

before_script:
  - echo 'deb-src http://deb.debian.org/debian unstable main' >> /etc/apt/sources.list
  - apt-get update
  - apt-get build-dep --yes --no-install-recommends poppler
  - apt-get install --yes --no-install-recommends ninja-build libcurl4-openssl-dev git ca-certificates locales libgtk-3-dev libbrotli-dev libboost-container-dev qt6-base-dev
  - echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen
  - locale-gen

variables:
  LANG: en_US.UTF-8
  LANGUAGE: en_US:en
  LC_ALL: en_US.UTF-8
  DEBIAN_FRONTEND: noninteractive
  TEST_DATA_URL: https://gitlab.freedesktop.org/${CI_PROJECT_NAMESPACE}/test.git
  UPSTREAM_TEST_DATA_URL: https://gitlab.freedesktop.org/poppler/test.git

cache:
  key: "$CI_BUILD_NAME"
  paths:
    - build/

clang_format:
  stage: build
  before_script:
  - apt-get update
  - apt-get install --yes --no-install-recommends git clang-format-15
  script:
    - find . \( -name "*.cpp" -or -name "*.h"  -or -name "*.c"  -or -name "*.cc" \) -exec clang-format-15 -i {} \;
    - git diff --exit-code

build:
  stage: build
  script:
    - apt-get update
    - bash do-the-gnupg-2.4-dance.sh $PWD/build/gnupg/
    - git clone --branch ${CI_COMMIT_REF_NAME} --depth 1 ${TEST_DATA_URL} test-data || git clone --depth 1 ${UPSTREAM_TEST_DATA_URL} test-data
    - mkdir -p build && cd build
    - cmake -G Ninja -DTESTDATADIR=$PWD/../test-data -DCMAKE_PREFIX_PATH=$PWD/gnupg ..
    - ninja -j ${FDO_CI_CONCURRENT}
    - ctest --output-on-failure

build_clang15_libcpp:
  stage: build
  script:
    - echo "We want to compile with C++23 here because it has some nice things like deleted std::string nullptr constructor"
    - sed -i -e "s@CMAKE_CXX_STANDARD 17@CMAKE_CXX_STANDARD 23@g" CMakeLists.txt
    - git clone --branch ${CI_COMMIT_REF_NAME} --depth 1 ${TEST_DATA_URL} test-data || git clone --depth 1 ${UPSTREAM_TEST_DATA_URL} test-data
    - apt-get install --yes --no-install-recommends libclang-15-dev llvm-15-dev libc++-15-dev libc++abi-15-dev clang-tidy-15 clang-15 libunwind-15-dev gperf jq
    - srcdir=`pwd` && mkdir -p /tmp/poppler_build && cd /tmp/poppler_build
    - clang++-15 -fPIC -shared -o goostring-format-checker.so $srcdir/test/goostring-format-checker/goostring-format-checker.cc -D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS -I /usr/lib/llvm-15/include/
    - echo "We disable Qt6 tests since Qt6 exposes std::string in its ABI which makes it not build in this CI since we're using libc++ but Qt6 in debian is build with libstdc++"
    - CC=clang-15 CXX=clang++-15 cmake -G Ninja -DCMAKE_CXX_FLAGS="-stdlib=libc++ -Xclang -load -Xclang $PWD/goostring-format-checker.so -Xclang -add-plugin -Xclang goostring-format-checker -Werror -Wno-deprecated-declarations" -DTESTDATADIR=$srcdir/test-data -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_QT6_TESTS=OFF  $srcdir
    - ninja -j ${FDO_CI_CONCURRENT}
    - ctest --output-on-failure
    - echo "This is a complex way of not running clang-tidy over autogenerated files, unfortunately -DCMAKE_CXX_CLANG_TIDY doesn't support that https://gitlab.kitware.com/cmake/cmake/-/issues/19772"
    - cat compile_commands.json | jq  '[.[] | select(.file | contains("'"$srcdir"'"))]' > compile_commands.aux.json
    - cp compile_commands.aux.json compile_commands.json
    - echo "Cheat a bit and remove the moc includes so that we don't lint autogenerated code"
    - echo "Maybe we can replace this with NOLINTBEGIN in the future https://github.com/llvm/llvm-project/issues/56983"
    - find $srcdir/qt* -name *.cpp -exec sed -E -i '/#include .*moc"$/d' {} \;
    - cp "$srcdir/.clang-tidy" .
    - run-clang-tidy-15

build_ubuntu_20_04:
  stage: build
  image: ubuntu:20.04
  before_script:
    - apt-get update
    - apt-get install --yes --no-install-recommends build-essential cmake ninja-build libjpeg-dev libopenjp2-7-dev qtbase5-dev gobject-introspection libglib2.0-dev libgtk-3-dev libgirepository1.0-dev libnss3-dev ca-certificates libcurl4-nss-dev liblcms2-dev libboost-container-dev libtiff-dev wget p7zip-full git
    - wget -r -l1 -np "https://download.qt.io/online/qtsdkrepository/linux_x64/desktop/qt6_620/qt.qt6.620.gcc_64/" -A "6.2.0-0-*qtbase-Linux-RHEL_8_2-GCC-Linux-RHEL_8_2-X86_64.7z"
    - 7z x download.qt.io/online/qtsdkrepository/linux_x64/desktop/qt6_620/qt.qt6.620.gcc_64/6.2.0-0-*qtbase-Linux-RHEL_8_2-GCC-Linux-RHEL_8_2-X86_64.7z
    - wget -r -l1 -np "https://download.qt.io/online/qtsdkrepository/linux_x64/desktop/qt6_620/qt.qt6.620.gcc_64/" -A "6.2.0-0-*icu-linux-Rhel7.2-x64.7z"
    - 7z x download.qt.io/online/qtsdkrepository/linux_x64/desktop/qt6_620/qt.qt6.620.gcc_64/6.2.0-0-*icu-linux-Rhel7.2-x64.7z
  script:
    - git clone --branch ${CI_COMMIT_REF_NAME} --depth 1 ${TEST_DATA_URL} test-data || git clone --depth 1 ${UPSTREAM_TEST_DATA_URL} test-data
    - mkdir -p build && cd build
    - cmake -G Ninja  -DTESTDATADIR=$PWD/../test-data -DCMAKE_PREFIX_PATH=$PWD/../6.2.0/gcc_64/lib/cmake ..
    - ninja
    - ctest --output-on-failure

build_clazy_clang15:
  stage: build
  script:
    - apt-get install --yes --no-install-recommends clazy clang-15
    - mkdir -p build && cd build
    - CC=clang-15 CXX=clazy CXXFLAGS="-Werror -Wno-deprecated-declarations" cmake -G Ninja ..
    - CLAZY_CHECKS="level0,level1,level2,isempty-vs-count,qhash-with-char-pointer-key,tr-non-literal,no-non-pod-global-static" ninja -j ${FDO_CI_CONCURRENT}

build_android:
  stage: build
  image: kdeorg/android-sdk
  before_script:
    - echo "workaround for ECM Android toolchain wanting all binaries to be shared libraries"
    - sed -i -e 's/<LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS>/<LINK_FLAGS>/g' /opt/nativetooling/share/ECM/toolchain/Android.cmake
  script:
    - mkdir -p build && cd build
    - 'ANDROID_ARCH_ABI=arm64-v8a cmake -G Ninja ..
                         -DCMAKE_ANDROID_API=28
                         -DCMAKE_PREFIX_PATH="/opt/Qt/;/opt/kdeandroid-arm64/"
                         -DCMAKE_BUILD_TYPE=debug
                         -DCMAKE_POSITION_INDEPENDENT_CODE=OFF
                         -DENABLE_DCTDECODER=unmaintained
                         -DENABLE_LIBOPENJPEG=unmaintained
                         -DENABLE_BOOST=OFF
                         -DCMAKE_CXX_FLAGS="-Werror -Wno-deprecated-declarations"
                         -DCMAKE_TOOLCHAIN_FILE=/opt/nativetooling/share/ECM/toolchain/Android.cmake'
    - ninja -j ${FDO_CI_CONCURRENT}

qt5_docs:
  only:
    - master
  stage: document
  variables:
    QT_SELECT: qt5
  script:
    - apt-get install --yes --no-install-recommends doxygen graphviz qtchooser qttools5-dev-tools
    - cd qt5/src
    - doxygen
  cache: {}
  artifacts:
    paths:
      - qt5/src/APIDOCS-html

qt6_docs:
  only:
    - master
  stage: document
  script:
    - apt-get install --yes --no-install-recommends doxygen graphviz qt6-documentation-tools
    - cd qt6/src
    - ( cat Doxyfile ; echo "QHG_LOCATION=/usr/lib/qt6/bin/qhelpgenerator" ) | doxygen -
  cache: {}
  artifacts:
    paths:
      - qt6/src/APIDOCS-html

cpp_docs:
  only:
    - master
  stage: document
  script:
    - apt-get install --yes --no-install-recommends doxygen graphviz
    - cd cpp
    - doxygen
  cache: {}
  artifacts:
    paths:
      - cpp/APIDOCS-html

glib_docs:
  only:
    - master
  stage: document
  script:
    - apt-get install --yes --no-install-recommends gtk-doc-tools
    - mkdir -p build && cd build
    - cmake -G Ninja -DENABLE_GTK_DOC=YES ..
    - ninja -j ${FDO_CI_CONCURRENT} glib-docs
  cache: {}
  artifacts:
    paths:
      - build/glib/reference/html

trigger_pages:
  only:
    - master
  stage: publish
  image: alpine:latest
  before_script:
    - apk --update upgrade
    - apk add curl ca-certificates
  script:
    - 'curl --request POST --form "token=$WEB_PAGE_TRIGGER" --form ref=master https://gitlab.freedesktop.org/api/v4/projects/poppler%2Fpoppler-web-page/trigger/pipeline'
  cache: {}
